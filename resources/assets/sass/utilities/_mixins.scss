/**
 * Vertical Align and Block Element
 */
@mixin vertical-align() {
	position:relative;
	top:50%;
	-webkit-transform: translateY(-25%);
	-ms-transform: translateY(-25%);
	transform: translateY(-25%);
}

/**
 * Center an absolute positioined element vertically or Horizontially 
 * @param  {string} $xy:xy  Center based on string
 */
@mixin center($xy:xy) {
  @if $xy == xy {
    left: 50%;
    top: 50%;
    bottom: auto;
    right: auto;
    @include transform(translateX(-50%) translateY(-50%));
  }
  @else if $xy == x {
    left: 50%;
    right: auto;
    @include transform(translateX(-50%));
  }
  @else if $xy == y {
    top: 50%;
    bottom: auto;
    @include transform(translateY(-50%));
  }
}



/**
 * Clear out the Margin and PAdding
 */
@mixin clearMP() {
	margin:0;
	padding:0;
}


/**
 * Fall Back for Rem Component
 * @param  $selector
 * @param  $target
 * @param  $context
 */
@mixin rem-fallback($selector, $target, $context:$base-font-size) {
	#{$selector} : ($target) + px;
	#{$selector} : rem-calc($target, $context);
}



/**
 * Setup Breakpoints based on _setting definition
 * @param  $name "Breakpoint Name"
 * @return @media-query
 */
@mixin breakpoint($breakpoint) {
	$mediaQuery: getCombinedBreakpoints($breakpoint);
	@if $mediaQuery == false {
		@warn "Unable to generate media query for breakpoint(s) #{$breakpoint}"
	} @else {
		@media #{$mediaQuery} {
			@content;
		}
	}
}


/**
 * Remove List style and display list as a display Item
 * @param  {string} $inline:inline  inline or block
 * @return {context}
 */
@mixin displayList($inline:inline) {
	ul, li {@include clearMP;}

	li {
		list-style:none;
	}

	@if $inline == inline {
		li {
			display: inline-block;
		}
	}
	@else {
	  li {
	  	display:block;
	  }
	}
}


/**
 * Make a Burger Menu
 */
@mixin burger() {
    position: relative;
    margin-top: $burger-hg;
    margin-bottom: $burger-hg;

    &, &:before, &:after {
        display: block;
        width: $burger-width;
        height: $burger-height;
        background-color: $burger-color;
        @include transition(background-color, transform ease-in 0.2s);
    }

    &:before, &:after {
        position: absolute;
        content: "";
    }

    &:before {
        top: -$burger-hg;
    }

    &:after {
        top: $burger-hg;
    }
}


/**
 * Select parts of the burger
 */

@mixin burger-parts {
    &, &:before, &:after {
        @content;
    }
}

@mixin burger-top {
    &:before {
        @content;
    }
}

@mixin burger-middle {
    & {
        @content;
    }
}

@mixin burger-bottom {
    &:after {
        @content;
    }
}


/**
 * Burger animations
 */

@mixin burger-to-cross {
    & {
        background-color: transparent;
    }

    &:before {
		  @include transform(translateY($burger-hg) rotate(45deg))
      background-color:$burger-open;
	  }

    &:after {
		  @include transform(translateY(-$burger-hg) rotate(-45deg))
      background-color:$burger-open;
    }
}


/**
 * Stagger a list 
 */
@mixin staggerList($childrenNum, $element) {
    $delay: 0.1;
    
    @for $i from 1 through $childrenNum {
        &:nth-child(#{$i}) #{$element} { 
            @include transition(#{$delay}s)
        }

        $delay: $delay + 0.1;
    }
    
}



/*
Angle Shit
 */
@mixin angle($pseudo, $flip: false, $angle: 2.5deg) {
  // Possible values for $pseudo are: before, after, both
  @if $pseudo == 'before' or $pseudo == 'after' or $pseudo == 'both' {
    position: relative;
    z-index: 1;
    $selector: if($pseudo == 'both', '&:before,&:after', '&:#{$pseudo}');

    #{$selector} {
      background: inherit;
      content: '';
      display: block;
      height: 80%;
      left: 0;
      margin-top:-40px;
      position: absolute;
      right: 0;
      z-index: -1;
      -webkit-backface-visibility: hidden; // for Chrome Windows
    }

    @if $pseudo == 'before' {
      #{$selector} {
        top: 0;

        @if $flip {
          transform: skewY($angle * -1);
          transform-origin: 0 0;
        } @else {
          transform: skewY($angle);
          transform-origin: 100% 0;
        }
      }
    }

    @if $pseudo == 'after' {
      #{$selector} {
        bottom: 0;

        @if $flip {
          transform: skewY($angle);
          transform-origin: 0 100%;
        } @else {
          transform: skewY($angle * -1);
          transform-origin: 100%;
        }
      }
    }

    @if $pseudo == 'both' {
      &:before {
        top: 0;

        @if $flip {
          transform: skewY($angle * -1);
          transform-origin: 0 0;
        } @else {
          transform: skewY($angle);
          transform-origin: 100% 0;
        }
      }

      &:after {
        bottom: 0;

        @if $flip {
          transform: skewY($angle);
          transform-origin: 0 0;
        } @else {
          transform: skewY($angle * -1);
          transform-origin: 100%;
        }
      }
    }
  }
}


/**
 * Maintain Vido Ratios (1:1, 16:9)
 * @param  {[int]} $ratio: 1:1 
 */
@mixin maintainRatio($ratio: 1 1) {
  @if length($ratio) < 2 or length($ratio) > 2 {
     @warn "$ratio must be a list with two values.";
  }

  $width: 100%;
  $height: percentage(nth($ratio, 2) / nth($ratio, 1));
  
  width: $width;
  height: 0;
  padding-bottom: $height;
}



